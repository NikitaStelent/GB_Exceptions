# Напишите приложение, которое будет запрашивать у пользователя следующие данные в произвольном порядке, разделенные пробелом:
# Фамилия Имя Отчество дата рождения номертелефона пол
# Форматы данных:
# фамилия, имя, отчество - строки
# дата_рождения - строка формата dd.mm.yyyy
# номер_телефона - целое беззнаковое число без форматирования
# пол - символ латиницей f или m.
# Приложение должно проверить введенные данные по количеству. Если количество не совпадает с требуемым, вернуть код ошибки, обработать его и показать пользователю сообщение, что он ввел меньше и больше данных, чем требуется.
# Приложение должно попытаться распарсить полученные значения и выделить из них требуемые параметры. Если форматы данных не совпадают, нужно бросить исключение, соответствующее типу проблемы. Можно использовать встроенные типы java и создать свои. Исключение должно быть корректно обработано, пользователю выведено сообщение с информацией, что именно неверно.
# Если всё введено и обработано верно, должен создаться файл с названием, равным фамилии, в него в одну строку должны записаться полученные данные, вида
# <Фамилия><Имя><Отчество><датарождения> <номертелефона><пол>
# Однофамильцы должны записаться в один и тот же файл, в отдельные строки.
# Не забудьте закрыть соединение с файлом.
# При возникновении проблемы с чтением-записью в файл, исключение должно быть корректно обработано, пользователь должен увидеть стектрейс ошибки.


def check_date():
    date = birth_date.split('.')
    days = int(date[0]) in range(1, 32)
    months = int(date[1]) in range(1, 13)
    years = int(date[2]) in range(1900, 2024)
    return days and months and years

def format_handler():
    exceptions = []
    
    if not phone_number.isnumeric():
        exceptions.append('Неправильный формат номера телефона')
    if not check_date():
        exceptions.append('Неправильный формат даты рождения')
    if gender not in ['m', 'f']:
        exceptions.append('Указан неправильный пол')
    if len(exceptions) > 0:
        return '\n'.join(exceptions)
    return

def write_file(file_name):
    if not format_handler():  
        with open(f'{file_name}.txt', 'a') as writer:
            writer.write(' '.join([last_name, first_name, middle_name, birth_date, phone_number, gender]) + "\n")
    else:
        print(format_handler())
            
def read_file(file_name):
    print('Список людей: ')
    with open(f'{file_name}.txt', 'r') as reader:
        return reader.read()
  
try:
    while True:
        input_text = 'Введите данные через пробел в формате: Фамилия Имя Отчество ДатаРождения НомерТелефона Пол: '
        last_name, first_name, middle_name, birth_date, phone_number, gender = input(input_text).split()
        write_file(last_name)
        if input('Добавить еще одного человека? (y/n): ').lower() == 'n':
            break
    print(read_file(last_name))
except ValueError:
    print('Неправильное количество данных')
except NameError:
    print('Название файла должно быть в строковом формате')
except FileNotFoundError:
    print('Не найден запрашиваемый файл')
